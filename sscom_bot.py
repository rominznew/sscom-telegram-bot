import os
import json
import requests
from bs4 import BeautifulSoup
import hashlib

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
URL = "https://www.ss.com/ru/real-estate/flats/riga/ziepniekkalns/"

SEEN_FILE = "seen_ads.json"
sent_hashes = set()

# ---------- –§—É–Ω–∫—Ü–∏–∏ ----------

def load_seen_ads():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."""
    global sent_hashes
    if os.path.exists(SEEN_FILE):
        try:
            with open(SEEN_FILE, "r", encoding="utf-8") as f:
                sent_hashes = set(json.load(f))
            print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sent_hashes)} —Å—Ç–∞—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ {SEEN_FILE}.")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {SEEN_FILE}: {e}")
            sent_hashes = set()
    else:
        print("‚ÑπÔ∏è –§–∞–π–ª seen_ads.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")

def save_seen_ads():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π."""
    try:
        with open(SEEN_FILE, "w", encoding="utf-8") as f:
            json.dump(list(sent_hashes), f, ensure_ascii=False, indent=2)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(sent_hashes)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ {SEEN_FILE}.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {SEEN_FILE}: {e}")

def get_ad_hash(title, url):
    """–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö—ç—à –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    return hashlib.md5(f"{title}-{url}".encode()).hexdigest()

def get_latest_ads():
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞."""
    print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {URL}")
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(URL, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')
    ads = soup.select('table[class="list"] tr[id^=tr_]')

    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    new_ads = []

    for ad in ads:
        link_tag = ad.select_one('a[href]')
        if not link_tag:
            continue

        title = link_tag.text.strip()
        relative_url = link_tag['href']
        full_url = 'https://www.ss.com' + relative_url
        ad_hash = get_ad_hash(title, full_url)

        if ad_hash not in sent_hashes:
            sent_hashes.add(ad_hash)
            new_ads.append((title, full_url))

    return new_ads

def send_telegram_message(text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": text}
    r = requests.post(url, data=data)
    if r.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {r.text}")
    else:
        print(f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")

# ---------- MAIN ----------

if __name__ == "__main__":
    print("‚ñ∂Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    if not TELEGRAM_TOKEN or not CHAT_ID:
        raise ValueError("‚ùå TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    load_seen_ads()
    ads = get_latest_ads()

    if ads:
        send_telegram_message(f"üîî –ù–∞–π–¥–µ–Ω–æ {len(ads)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π!")
        for title, url in ads:
            send_telegram_message(f"{title}\n{url}")
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {title}")
    else:
        print("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")

    save_seen_ads()
