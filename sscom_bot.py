import os
import requests
from bs4 import BeautifulSoup
import hashlib
import json

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
URL = "https://www.ss.com/ru/real-estate/flats/riga/ziepniekkalns/"
SEEN_FILE = "seen_ads.json"

if not TELEGRAM_TOKEN or not CHAT_ID:
    raise ValueError("‚ùå TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# --- –†–∞–±–æ—Ç–∞ —Å seen_ads.json ---
def load_seen_ads():
    if not os.path.exists(SEEN_FILE):
        print("‚ö†Ô∏è –§–∞–π–ª seen_ads.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π []")
        with open(SEEN_FILE, "w", encoding="utf-8") as f:
            json.dump([], f)
        return set()
    try:
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {SEEN_FILE}: {e}. –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.")
        with open(SEEN_FILE, "w", encoding="utf-8") as f:
            json.dump([], f)
        return set()

def save_seen_ads(seen_ads):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen_ads), f, ensure_ascii=False, indent=2)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(seen_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ {SEEN_FILE}")

# --- –•—ç—à –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏) ---
def get_ad_hash(title, url):
    return hashlib.md5(f"{title}-{url}".encode()).hexdigest()

# --- –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ---
def get_latest_ads(seen_ads):
    headers = {"User-Agent": "Mozilla/5.0"}
    print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {URL}")
    response = requests.get(URL, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')

    ads = soup.select('table#page_main table.list tr[id^=tr_] a[href]')
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–≤—Å–µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ).")

    new_ads = []
    for link_tag in ads:
        title = link_tag.text.strip()
        relative_url = link_tag['href']
        full_url = 'https://www.ss.com' + relative_url
        ad_hash = get_ad_hash(title, full_url)

        if ad_hash not in seen_ads:
            seen_ads.add(ad_hash)
            new_ads.append((title, full_url))

    print(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(new_ads)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    return new_ads, seen_ads

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ---
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": text}
    r = requests.post(url, data=data)
    if r.status_code == 200:
        print(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {r.text}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    print("‚ñ∂Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    try:
        seen_ads = load_seen_ads()
        ads, seen_ads = get_latest_ads(seen_ads)

        if ads:
            for title, url in ads:
                message = f"üîî –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{title}\n{url}"
                send_telegram_message(message)
            save_seen_ads(seen_ads)
        else:
            print("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
