import os
import requests
from bs4 import BeautifulSoup
import hashlib
import json

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
URL = "https://www.ss.com/ru/real-estate/flats/riga/ziepniekkalns/"
SEEN_FILE = "seen_ads.json"

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

if not TELEGRAM_TOKEN or not CHAT_ID:
    raise ValueError("‚ùå TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# === –†–∞–±–æ—Ç–∞ —Å —Ö—ç—à–∞–º–∏ ===
def get_ad_hash(title, url):
    return hashlib.md5(f"{title}-{url}".encode()).hexdigest()

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ===
def load_seen_ads():
    if not os.path.exists(SEEN_FILE):
        print(f"‚ö†Ô∏è –§–∞–π–ª {SEEN_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        save_seen_ads(set())
        return set()
    try:
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {SEEN_FILE}: {e}")
        return set()

def save_seen_ads(seen_ads):
    try:
        with open(SEEN_FILE, "w", encoding="utf-8") as f:
            json.dump(list(seen_ads), f)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(seen_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ {SEEN_FILE}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {SEEN_FILE}: {e}")

# === –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ===
def get_latest_ads(seen_ads):
    headers = {"User-Agent": "Mozilla/5.0"}
    print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {URL}")
    response = requests.get(URL, headers=headers)

    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
        return [], seen_ads

    soup = BeautifulSoup(response.text, 'html.parser')

    rows = soup.select('tr[id^="tr_"]')
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏.")

    new_ads = []

    for row in rows:
        link_tag = row.select_one('a[href*="/msg/"]')
        if not link_tag:
            continue

        title = link_tag.text.strip()
        relative_url = link_tag['href']
        full_url = 'https://www.ss.com' + relative_url if not relative_url.startswith("http") else relative_url

        ad_hash = get_ad_hash(title, full_url)
        if ad_hash not in seen_ads:
            seen_ads.add(ad_hash)
            new_ads.append((title, full_url))

    print(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(new_ads)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    return new_ads, seen_ads

# === Telegram ===
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": text}
    r = requests.post(url, data=data)
    if r.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {r.text}")
    else:
        print("üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("‚ñ∂Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    seen_ads = load_seen_ads()

    try:
        ads, seen_ads = get_latest_ads(seen_ads)
        if ads:
            for title, url in ads:
                message = f"üîî –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{title}\n{url}"
                send_telegram_message(message)
                print(f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {title}")
        else:
            print("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    save_seen_ads(seen_ads)
